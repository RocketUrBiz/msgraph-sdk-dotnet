// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Android Work Profile General Device Configuration.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class AndroidWorkProfileGeneralDeviceConfiguration : DeviceConfiguration
    {
    
        /// <summary>
        /// Gets or sets password block fingerprint unlock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordBlockFingerprintUnlock", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasswordBlockFingerprintUnlock { get; set; }
    
        /// <summary>
        /// Gets or sets password block trust agents.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordBlockTrustAgents", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasswordBlockTrustAgents { get; set; }
    
        /// <summary>
        /// Gets or sets password expiration days.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordExpirationDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordExpirationDays { get; set; }
    
        /// <summary>
        /// Gets or sets password minimum length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMinimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMinimumLength { get; set; }
    
        /// <summary>
        /// Gets or sets password minutes of inactivity before screen timeout.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMinutesOfInactivityBeforeScreenTimeout", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMinutesOfInactivityBeforeScreenTimeout { get; set; }
    
        /// <summary>
        /// Gets or sets password previous password block count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordPreviousPasswordBlockCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordPreviousPasswordBlockCount { get; set; }
    
        /// <summary>
        /// Gets or sets password sign in failure count before factory reset.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordSignInFailureCountBeforeFactoryReset", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordSignInFailureCountBeforeFactoryReset { get; set; }
    
        /// <summary>
        /// Gets or sets password required type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordRequiredType", Required = Newtonsoft.Json.Required.Default)]
        public AndroidWorkProfileRequiredPasswordType? PasswordRequiredType { get; set; }
    
        /// <summary>
        /// Gets or sets work profile data sharing type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileDataSharingType", Required = Newtonsoft.Json.Required.Default)]
        public AndroidWorkProfileCrossProfileDataSharingType? WorkProfileDataSharingType { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block notifications while device locked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockNotificationsWhileDeviceLocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockNotificationsWhileDeviceLocked { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block adding accounts.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockAddingAccounts", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockAddingAccounts { get; set; }
    
        /// <summary>
        /// Gets or sets work profile bluetooth enable contact sharing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBluetoothEnableContactSharing", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBluetoothEnableContactSharing { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block screen capture.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockScreenCapture", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockScreenCapture { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block cross profile caller id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockCrossProfileCallerId", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockCrossProfileCallerId { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block camera.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockCamera", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockCamera { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block cross profile contacts search.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockCrossProfileContactsSearch", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockCrossProfileContactsSearch { get; set; }
    
        /// <summary>
        /// Gets or sets work profile block cross profile copy paste.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileBlockCrossProfileCopyPaste", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileBlockCrossProfileCopyPaste { get; set; }
    
        /// <summary>
        /// Gets or sets work profile default app permission policy.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileDefaultAppPermissionPolicy", Required = Newtonsoft.Json.Required.Default)]
        public AndroidWorkProfileDefaultAppPermissionPolicyType? WorkProfileDefaultAppPermissionPolicy { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password block fingerprint unlock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordBlockFingerprintUnlock", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfilePasswordBlockFingerprintUnlock { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password block trust agents.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordBlockTrustAgents", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfilePasswordBlockTrustAgents { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password expiration days.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordExpirationDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordExpirationDays { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password minimum length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinimumLength { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min numeric characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinNumericCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinNumericCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min non letter characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinNonLetterCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinNonLetterCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min letter characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinLetterCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinLetterCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min lower case characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinLowerCaseCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinLowerCaseCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min upper case characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinUpperCaseCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinUpperCaseCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password min symbol characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinSymbolCharacters", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinSymbolCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password minutes of inactivity before screen timeout.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordMinutesOfInactivityBeforeScreenTimeout", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password previous password block count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordPreviousPasswordBlockCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordPreviousPasswordBlockCount { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password sign in failure count before factory reset.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordSignInFailureCountBeforeFactoryReset", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WorkProfilePasswordSignInFailureCountBeforeFactoryReset { get; set; }
    
        /// <summary>
        /// Gets or sets work profile password required type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfilePasswordRequiredType", Required = Newtonsoft.Json.Required.Default)]
        public AndroidWorkProfileRequiredPasswordType? WorkProfilePasswordRequiredType { get; set; }
    
        /// <summary>
        /// Gets or sets work profile require password.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "workProfileRequirePassword", Required = Newtonsoft.Json.Required.Default)]
        public bool? WorkProfileRequirePassword { get; set; }
    
        /// <summary>
        /// Gets or sets security require verify apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "securityRequireVerifyApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? SecurityRequireVerifyApps { get; set; }
    
    }
}

